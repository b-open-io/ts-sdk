/**
 * Random number generator that works across modern JavaScript environments.
 *
 * This implementation uses the Web Crypto API which is available in:
 * - Node.js 18+ via globalThis.crypto
 * - Modern browsers via globalThis.crypto, self.crypto, or window.crypto
 * - Web Workers and Service Workers via self.crypto
 * - Deno and Bun via globalThis.crypto
 * - React Native (requires react-native-get-random-values polyfill)
 *
 * @throws {Error} If no secure random number generator is available
 */
class Rand {
  _rand: (n: number) => number[] // âœ… Explicit function type

  getRandomValues (obj: any, n: number) {
    const arr = new Uint8Array(n)
    obj.crypto.getRandomValues(arr)
    return Array.from(arr)
  }

  constructor () {
    const noRand = (): never => {
      throw new Error(
        'No secure random number generator is available in this environment.'
      )
    }

    this._rand = noRand // Assign the function

    // Try globalThis.crypto (works in Node.js 18+, modern browsers, and Deno)
    if (typeof globalThis !== 'undefined' && typeof (globalThis as any).crypto?.getRandomValues === 'function') {
      this._rand = (n) => {
        /* eslint-disable-next-line */
        return this.getRandomValues(globalThis as any, n)
      }
      return
    }

    // Try self.crypto (Web Workers and Service Workers)
    if (typeof self !== 'undefined' && typeof self.crypto?.getRandomValues === 'function') {
      this._rand = (n) => {
        /* eslint-disable-next-line */
        return this.getRandomValues(self as any, n)
      }
      return
    }

    // Try window.crypto (browsers)
    if (typeof window !== 'undefined' && typeof (window as any).crypto?.getRandomValues === 'function') {
      this._rand = (n) => {
        /* eslint-disable-next-line */
        return this.getRandomValues(window as any, n)
      }
      return
    }

    // React Native support - try to load polyfill
    if (typeof navigator !== 'undefined' && (navigator as any).product === 'ReactNative') {
      try {
        // Try to require the polyfill - this will populate globalThis.crypto
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require('react-native-get-random-values')
        
        if (typeof (globalThis as any).crypto?.getRandomValues === 'function') {
          this._rand = (n) => {
            /* eslint-disable-next-line */
            return this.getRandomValues(globalThis as any, n)
          }
          return
        }
      } catch (e) {
        // Polyfill not available - provide helpful error
        this._rand = (): never => {
          throw new Error(
            'React Native detected but crypto is not available. ' +
            'Please install and import "react-native-get-random-values" at the top of your entry file:\n' +
            'npm install react-native-get-random-values\n' +
            'Then add: import "react-native-get-random-values" to your index.js/App.js'
          )
        }
        return
      }
    }

    // No crypto available
    this._rand = noRand
  }

  generate (len: number): number[] {
    return this._rand(len)
  }
}

let ayn: Rand | null = null

/**
 * Generates a sequence of pseudo-random bytes with the given length.
 *
 * @param len - The number of bytes to generate
 *
 * @returns The generated bytes
 *
 * @example
 * import Random from '@bsv/sdk/primitives/Random'
 * const bytes = Random(32) // Produces 32 random bytes
 */
export default (len: number): number[] => {
  if (ayn == null) {
    ayn = new Rand()
  }
  return ayn.generate(len)
}
